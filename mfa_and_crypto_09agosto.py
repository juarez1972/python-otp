# -*- coding: utf-8 -*-
"""mfa_and_crypto 09agosto.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C8ZSrF_u9SxFQXp85csVnNtCfgH-pNiQ
"""

import pyotp
import time
from cryptography.fernet import Fernet
import base64
##
import base256
from os import remove
from base256 import encode, decode, encode_hex, decode_hex, encode_file, decode_file, encode_string, decode_string
##
import hashlib

"""Gerar Shared Key - NAO RODAR NOVAMENTE"""

base32secret = pyotp.random_base32()
print('A chave gerada é:', base32secret)

"""Gerar TOTP - Lado do cliente

"""

base32secret = 'UOVSHEO5LROFRXDPPPWDPMOEYKLSKVNZ'
print('Secret:', base32secret)
totp = pyotp.TOTP(base32secret)
print('Código OTP:', totp.now())
# time.sleep(30)
# print('OTP code:', totp.now())

"""Autenticar MFA

"""

# print(totp.now())
mfa_digitado = input('Digite o codigo:')
codigo_otp = totp.now()
print('O codigo digitado foi:', mfa_digitado)
print('O codigo otp do sistema é: ', codigo_otp)
def funcao_otp():
  if mfa_digitado != codigo_otp:
    print('Codigo errado!')
  else:
    print('Codigo certo')
funcao_otp()

"""Criptografia 1"""

# from cryptography.fernet import Fernet
key = Fernet.generate_key()
chave = Fernet(key)
texto_cifrado = chave.encrypt(b"Uma mensagem realmente secreta. Nao eh para olhos curiosos.")
print(texto_cifrado)
texto_plano = chave.decrypt(texto_cifrado)
print('Este é o texto plano:', texto_plano)

"""Criptografia 2"""

# from cryptography.fernet import Fernet
key = Fernet.generate_key()
chave_secreta = Fernet(key)
token = chave_secreta.encrypt(b"meu profundo segredo")
token
b'...'
chave_secreta.decrypt(token)
b'meu profundo segredo'

"""Ofuscacao com Base64 - Enconding"""

# import base64
sample_string = mfa_digitado
sample_string_bytes = sample_string.encode("ascii")

base64_bytes = base64.b64encode(sample_string_bytes)
base64_string = base64_bytes.decode("ascii")

print(f"Encoded string: {base64_string}")

"""Ofuscacao com Base64 - Decoding"""

base64_string = "NTYyNDEz"
base64_bytes = base64_string.encode("ascii")

sample_string_bytes = base64.b64decode(base64_bytes)
sample_string = sample_string_bytes.decode("ascii")

print(f"Decoded string: {sample_string}")

"""Funcoes Hash SHA512"""

# import hashlib

input('Digite o texto')
hash = hashlib.sha512( str( input ).encode("utf-8") ).hexdigest()
print(hash)
